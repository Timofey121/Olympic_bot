# -*- coding: utf8 -*-
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.utils.markdown import hbold, hlink, hunderline

from keyboards.inline.buttons_lessons_del_notif import inline_buttons_lessons_delete_notification
from keyboards.inline.del_subject_or_choice import inline_buttons_delete
from loader import dp
from states import Test
from utils.db_api.PostgreSQL import select_data_olimp_use_id, subscriber_exists, select_data_sub_info, \
    del_notif_in_olimpic, select_user, select_sub, del_data_in_olimpic, select_sub_id, select_data_olimp_use_subject


@dp.message_handler(text="üîî –£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
async def del_notification(message: types.Message):
    if int(list(await subscriber_exists(message.from_user.id))[0][-1]) != 1:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π(c–º.–Ω–∏–∂–µ).', reply_markup=inline_buttons_delete)
    else:
        await message.answer(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í—ã –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–´! –î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ @Timofey1566")


@dp.callback_query_handler(text_startswith="–£–¥–∞–ª–∏—Ç—å-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è-")
async def info_1(callback: types.CallbackQuery, state: FSMContext):
    answer_1 = callback.data.split('—è-')[-1]
    await state.update_data(answer1=answer_1)
    if answer_1 == "–ø—Ä–µ–¥–º–µ—Ç":
        try:
            if len(list(await select_data_olimp_use_id(telegram_id=callback.from_user.id))) > 0:
                await callback.message.answer(
                    f"{hbold('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç')} –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö –í–∞—Å –æ–ª–∏–º–ø–∏–∞–¥—ã!",
                    reply_markup=inline_buttons_lessons_delete_notification)
            else:
                await callback.message.answer("–ü–µ—Ä–µ–¥ —Ç–µ–º, —á—Ç–æ–±—ã —É–¥–∞–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∏—Ö –Ω–∞–¥–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å")
        except Exception as ex:
            await callback.message.answer("–ü–µ—Ä–µ–¥ —Ç–µ–º, —á—Ç–æ–±—ã —É–¥–∞–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∏—Ö –Ω–∞–¥–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å")

    elif answer_1 == "–Ω–æ–º–µ—Ä":
        await callback.message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ! –ù–∞—á–∞–ª—Å—è –ø–æ–∏—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!")
        a = list(await select_data_sub_info(telegram_id=callback.from_user.id))
        if len(await select_user(telegram_id=callback.from_user.id)) > 0:
            a += list(await select_data_sub_info(
                telegram_id=list(await select_user(telegram_id=callback.from_user.id))[0][-1]))
        c = [[]]
        t, k = 0, 0
        subs = []
        b = []
        if len(a) > 0:
            for i in range(len(a)):
                information_about_olimpiad = ''
                subject = list(await select_sub(int(a[i][-1])))[0][0]
                information_about_olimpiad += (f"{hunderline(a[i][1])}.  \n"
                                               f"–ù–∞—á–∞–ª–æ –æ–ª–∏–º–ø–∏–∞–¥—ã: {hbold(a[i][2])} \n"
                                               f"–≠—Ç–∞–ø –æ–ª–∏–º–ø–∏–∞–¥—ã: {hbold(a[i][3])} \n")
                i_about_ol = [a[i][1], a[i][2], a[i][3], a[i][-1]]
                if i_about_ol not in b:
                    b.append(i_about_ol)
                    information_about_olimpiad += "–û–ª–∏–º–ø–∏–∞–¥–∞ "
                    if a[i][-2] is True or str(a[i][-2]) == '1':
                        information_about_olimpiad += hbold('–í—Ö–æ–¥–∏—Ç –≤ –†–°–û–®')
                    else:
                        information_about_olimpiad += hbold('–ù–ï –≤—Ö–æ–¥–∏—Ç –≤ –†–°–û–®')
                    information_about_olimpiad += (
                        f"\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å {hlink(title='–¢–£–¢!', url=a[i][4])}\n"
                        f"–°–∞–π—Ç —ç—Ç–æ–π –æ–ª–∏–º–ø–∏–∞–¥—ã –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å {hlink(title='–¢–£–¢!', url=a[i][5])}\n")
                    if len(str(
                            subject).upper() + f"{k + 1}) –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ \n\n" + information_about_olimpiad
                           + '\n' + '-' * 54) > 4096:
                        t += 1
                        c.append([])
                    if subject not in subs:
                        c[t].append('~' * 54)
                        c[t].append(
                            f"{hbold(str(subject).upper())}\n\n{k + 1}) –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ \n{information_about_olimpiad}")
                        subs.append(subject)
                    else:
                        c[t].append(f"{k + 1}) –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ \n{information_about_olimpiad}")
                    k += 1

            for i in range(len(c)):
                await callback.message.answer("\n".join(c[i]))
        await callback.message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ—Ö –æ–ª–∏–º–ø–∏–∞–¥, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å(—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)!")

    await Test.Q_for_delete_notification_2.set()


@dp.callback_query_handler(text_startswith="–£–¥–∞–ª–£–≤–µ–ü—Ä–µ–¥–º–µ—Ç-")
async def idelnotif34(callback: types.CallbackQuery, state: FSMContext):
    sa = callback.data.split("-")[-1]
    sub_id = int(list(await select_sub_id(sub=(str(sa).lower().capitalize())))[0][0])
    rgt = list(await select_data_olimp_use_subject(sub_id))

    if rgt:
        await callback.message.answer(
            hbold(f"–ù–∞—á–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫ {sa.capitalize()}!"))
        await del_data_in_olimpic(user=callback.from_user.id, sub_id=sub_id)
        if len(await select_user(telegram_id=callback.from_user.id)) > 0:
            await del_data_in_olimpic(user=list(await select_user(telegram_id=callback.from_user.id))[0][-1],
                                      sub_id=sub_id)
        await callback.message.answer(hbold(f"–û—Ç–∫–ª—é—á–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫ {sa.capitalize()}!"))
    else:
        await callback.message.answer(hbold(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ {sa.capitalize()}"))


@dp.message_handler(state=Test.Q_for_delete_notification_2)
async def del_notification_2(message: types.Message, state: FSMContext):
    data = await state.get_data()
    answer1 = data.get("answer1")
    telegram_id = message.from_user.id
    if answer1 == "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è(–ø–æ –Ω–æ–º–µ—Ä—É)!":
        try:
            sa = message.text.split(",")
            for i in range(len(sa)):
                sa[i] = str(sa[i]).lstrip().rstrip()
            a = list(await select_data_sub_info(telegram_id=message.from_user.id))
            if len(await select_user(telegram_id=message.from_user.id)) > 0:
                a += list(await select_data_sub_info(
                    telegram_id=list(await select_user(telegram_id=message.from_user.id))[0][-1]))
            b = []
            for i in range(len(a)):
                i_about_ol = [a[i][1], a[i][2], a[i][3], a[i][4], a[i][5], a[i][-1]]
                if i_about_ol not in b:
                    b.append(i_about_ol)
            for i in range(len(b)):
                if str(int(i + 1)) in sa:
                    information_about_olimpiad = ''
                    information_about_olimpiad += (f"{hunderline(b[i][0])}.  \n"
                                                   f"–ù–∞—á–∞–ª–æ –æ–ª–∏–º–ø–∏–∞–¥—ã: {hbold(b[i][1])} \n"
                                                   f"–≠—Ç–∞–ø –æ–ª–∏–º–ø–∏–∞–¥—ã: {hbold(b[i][2])} \n")
                    information_about_olimpiad += "–û–ª–∏–º–ø–∏–∞–¥–∞ "
                    information_about_olimpiad += (
                        f"\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å {hlink(title='–¢–£–¢!', url=b[i][3])}\n"
                        f"–°–∞–π—Ç —ç—Ç–æ–π –æ–ª–∏–º–ø–∏–∞–¥—ã –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å {hlink(title='–¢–£–¢!', url=b[i][4])}\n")
                    await del_notif_in_olimpic(telegram_id, b[i][0], b[i][1],
                                               b[i][2], b[i][4], b[i][5])
                    if len(await select_user(telegram_id=message.from_user.id)) > 0:
                        await del_notif_in_olimpic(list(await select_user(telegram_id=message.from_user.id))[0][-1],
                                                   b[i][0], b[i][1],
                                                   b[i][2], b[i][4], b[i][5])
                    await message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –æ—Ç")
                    await message.answer(f"{i + 1}) {information_about_olimpiad}")
        except Exception as ex:
            await message.answer(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")

    await state.finish()
